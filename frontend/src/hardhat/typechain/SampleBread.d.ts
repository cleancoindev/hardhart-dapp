/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SampleBreadInterface extends ethers.utils.Interface {
  functions: {
    "bookingId()": FunctionFragment;
    "bookings(uint256)": FunctionFragment;
    "markSampleAsInactive(uint256)": FunctionFragment;
    "rentOutSample(string,string,string,uint256)": FunctionFragment;
    "rentSample(uint256,uint256,uint256)": FunctionFragment;
    "sampleId()": FunctionFragment;
    "samples(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bookingId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markSampleAsInactive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentOutSample",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentSample",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sampleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "samples",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bookingId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markSampleAsInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentOutSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentSample", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sampleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "samples", data: BytesLike): Result;

  events: {
    "NewBooking(uint256,uint256)": EventFragment;
    "NewSample(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBooking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSample"): EventFragment;
}

export class SampleBread extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SampleBreadInterface;

  functions: {
    bookingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        sampleId: BigNumber;
        checkInDate: BigNumber;
        checkOutDate: BigNumber;
        user: string;
      }
    >;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sampleId(overrides?: CallOverrides): Promise<[BigNumber]>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, string] & {
        name: string;
        description: string;
        metadata: string;
        isActive: boolean;
        price: BigNumber;
        owner: string;
      }
    >;
  };

  bookingId(overrides?: CallOverrides): Promise<BigNumber>;

  bookings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      sampleId: BigNumber;
      checkInDate: BigNumber;
      checkOutDate: BigNumber;
      user: string;
    }
  >;

  markSampleAsInactive(
    _sampleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentOutSample(
    name: string,
    description: string,
    metadata: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentSample(
    _sampleId: BigNumberish,
    checkInDate: BigNumberish,
    checkOutDate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sampleId(overrides?: CallOverrides): Promise<BigNumber>;

  samples(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber, string] & {
      name: string;
      description: string;
      metadata: string;
      isActive: boolean;
      price: BigNumber;
      owner: string;
    }
  >;

  callStatic: {
    bookingId(overrides?: CallOverrides): Promise<BigNumber>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        sampleId: BigNumber;
        checkInDate: BigNumber;
        checkOutDate: BigNumber;
        user: string;
      }
    >;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sampleId(overrides?: CallOverrides): Promise<BigNumber>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber, string] & {
        name: string;
        description: string;
        metadata: string;
        isActive: boolean;
        price: BigNumber;
        owner: string;
      }
    >;
  };

  filters: {
    NewBooking(
      propertyId?: BigNumberish | null,
      bookingId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { propertyId: BigNumber; bookingId: BigNumber }
    >;

    NewSample(
      sampleId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { sampleId: BigNumber }>;
  };

  estimateGas: {
    bookingId(overrides?: CallOverrides): Promise<BigNumber>;

    bookings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sampleId(overrides?: CallOverrides): Promise<BigNumber>;

    samples(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bookingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sampleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
