/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SampleBreadInterface extends ethers.utils.Interface {
  functions: {
    "bookingId()": FunctionFragment;
    "bookings(uint256)": FunctionFragment;
    "markSampleAsInactive(uint256)": FunctionFragment;
    "rentOutSample(string,string,string,uint256)": FunctionFragment;
    "rentSample(uint256,uint256,uint256)": FunctionFragment;
    "sampleId()": FunctionFragment;
    "samples(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bookingId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bookings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markSampleAsInactive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentOutSample",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rentSample",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sampleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "samples",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bookingId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bookings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markSampleAsInactive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentOutSample",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentSample", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sampleId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "samples", data: BytesLike): Result;

  events: {
    "NewBooking(uint256,uint256)": EventFragment;
    "NewSample(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewBooking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSample"): EventFragment;
}

export class SampleBread extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SampleBreadInterface;

  functions: {
    bookingId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "bookingId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sampleId: BigNumber;
      checkInDate: BigNumber;
      checkOutDate: BigNumber;
      user: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "bookings(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sampleId: BigNumber;
      checkInDate: BigNumber;
      checkOutDate: BigNumber;
      user: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "markSampleAsInactive(uint256)"(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rentOutSample(string,string,string,uint256)"(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "rentSample(uint256,uint256,uint256)"(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    sampleId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "sampleId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      metadata: string;
      isActive: boolean;
      price: BigNumber;
      owner: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;

    "samples(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      metadata: string;
      isActive: boolean;
      price: BigNumber;
      owner: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;
  };

  bookingId(overrides?: CallOverrides): Promise<BigNumber>;

  "bookingId()"(overrides?: CallOverrides): Promise<BigNumber>;

  bookings(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sampleId: BigNumber;
    checkInDate: BigNumber;
    checkOutDate: BigNumber;
    user: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "bookings(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    sampleId: BigNumber;
    checkInDate: BigNumber;
    checkOutDate: BigNumber;
    user: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  markSampleAsInactive(
    _sampleId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "markSampleAsInactive(uint256)"(
    _sampleId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rentOutSample(
    name: string,
    description: string,
    metadata: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rentOutSample(string,string,string,uint256)"(
    name: string,
    description: string,
    metadata: string,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rentSample(
    _sampleId: BigNumberish,
    checkInDate: BigNumberish,
    checkOutDate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "rentSample(uint256,uint256,uint256)"(
    _sampleId: BigNumberish,
    checkInDate: BigNumberish,
    checkOutDate: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  sampleId(overrides?: CallOverrides): Promise<BigNumber>;

  "sampleId()"(overrides?: CallOverrides): Promise<BigNumber>;

  samples(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    metadata: string;
    isActive: boolean;
    price: BigNumber;
    owner: string;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
    5: string;
  }>;

  "samples(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    name: string;
    description: string;
    metadata: string;
    isActive: boolean;
    price: BigNumber;
    owner: string;
    0: string;
    1: string;
    2: string;
    3: boolean;
    4: BigNumber;
    5: string;
  }>;

  callStatic: {
    bookingId(overrides?: CallOverrides): Promise<BigNumber>;

    "bookingId()"(overrides?: CallOverrides): Promise<BigNumber>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sampleId: BigNumber;
      checkInDate: BigNumber;
      checkOutDate: BigNumber;
      user: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "bookings(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      sampleId: BigNumber;
      checkInDate: BigNumber;
      checkOutDate: BigNumber;
      user: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "markSampleAsInactive(uint256)"(
      _sampleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rentOutSample(string,string,string,uint256)"(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rentSample(uint256,uint256,uint256)"(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sampleId(overrides?: CallOverrides): Promise<BigNumber>;

    "sampleId()"(overrides?: CallOverrides): Promise<BigNumber>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      metadata: string;
      isActive: boolean;
      price: BigNumber;
      owner: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;

    "samples(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      name: string;
      description: string;
      metadata: string;
      isActive: boolean;
      price: BigNumber;
      owner: string;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: BigNumber;
      5: string;
    }>;
  };

  filters: {
    NewBooking(
      propertyId: BigNumberish | null,
      bookingId: BigNumberish | null
    ): EventFilter;

    NewSample(sampleId: BigNumberish | null): EventFilter;
  };

  estimateGas: {
    bookingId(overrides?: CallOverrides): Promise<BigNumber>;

    "bookingId()"(overrides?: CallOverrides): Promise<BigNumber>;

    bookings(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bookings(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "markSampleAsInactive(uint256)"(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rentOutSample(string,string,string,uint256)"(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "rentSample(uint256,uint256,uint256)"(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    sampleId(overrides?: CallOverrides): Promise<BigNumber>;

    "sampleId()"(overrides?: CallOverrides): Promise<BigNumber>;

    samples(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "samples(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bookingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bookingId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bookings(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bookings(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markSampleAsInactive(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "markSampleAsInactive(uint256)"(
      _sampleId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rentOutSample(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rentOutSample(string,string,string,uint256)"(
      name: string,
      description: string,
      metadata: string,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rentSample(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "rentSample(uint256,uint256,uint256)"(
      _sampleId: BigNumberish,
      checkInDate: BigNumberish,
      checkOutDate: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    sampleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sampleId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "samples(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
