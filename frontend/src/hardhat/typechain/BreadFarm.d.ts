/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BreadFarmInterface extends ethers.utils.Interface {
  functions: {
    "breadBalance(address)": FunctionFragment;
    "breadToken()": FunctionFragment;
    "calculateYieldTotal(address)": FunctionFragment;
    "daiToken()": FunctionFragment;
    "isStaking(address)": FunctionFragment;
    "name()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingBalance(address)": FunctionFragment;
    "startTime(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdrawYield()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "breadBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "breadToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYieldTotal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "daiToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "isStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawYield",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "breadBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "breadToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateYieldTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daiToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawYield",
    data: BytesLike
  ): Result;

  events: {
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "YieldWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldWithdraw"): EventFragment;
}

export class BreadFarm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BreadFarmInterface;

  functions: {
    breadBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    breadToken(overrides?: CallOverrides): Promise<[string]>;

    calculateYieldTotal(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    daiToken(overrides?: CallOverrides): Promise<[string]>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  breadBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  breadToken(overrides?: CallOverrides): Promise<string>;

  calculateYieldTotal(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  daiToken(overrides?: CallOverrides): Promise<string>;

  isStaking(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawYield(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    breadBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    breadToken(overrides?: CallOverrides): Promise<string>;

    calculateYieldTotal(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiToken(overrides?: CallOverrides): Promise<string>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawYield(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Stake(
      from?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    Unstake(
      from?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    YieldWithdraw(
      to?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    breadBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    breadToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculateYieldTotal(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daiToken(overrides?: CallOverrides): Promise<BigNumber>;

    isStaking(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    breadBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    breadToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateYieldTotal(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStaking(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawYield(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
