/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SampleBread, SampleBreadInterface } from "../SampleBread";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "propertyId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "bookingId",
        type: "uint256",
      },
    ],
    name: "NewBooking",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "sampleId",
        type: "uint256",
      },
    ],
    name: "NewSample",
    type: "event",
  },
  {
    inputs: [],
    name: "bookingId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "bookings",
    outputs: [
      {
        internalType: "uint256",
        name: "sampleId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "checkInDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "checkOutDate",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sampleId",
        type: "uint256",
      },
    ],
    name: "markSampleAsInactive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "rentOutSample",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_sampleId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "checkInDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "checkOutDate",
        type: "uint256",
      },
    ],
    name: "rentSample",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "sampleId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "samples",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d81806100206000396000f3fe6080604052600436106100705760003560e01c80631dab301e1161004e5780631dab301e1461023f5780639c8ab971146102985780639d8d25dc146102c3578063e08b062f146102ed57610070565b806307e721291461007557806309e45a59146102035780630a10df7c1461022a575b600080fd5b34801561008157600080fd5b5061009f6004803603602081101561009857600080fd5b50356104b0565b604051808060200180602001806020018715158152602001868152602001856001600160a01b0316815260200184810384528a818151815260200191508051906020019080838360005b838110156101015781810151838201526020016100e9565b50505050905090810190601f16801561012e5780820380516001836020036101000a031916815260200191505b5084810383528951815289516020918201918b019080838360005b83811015610161578181015183820152602001610149565b50505050905090810190601f16801561018e5780820380516001836020036101000a031916815260200191505b5084810382528851815288516020918201918a019080838360005b838110156101c15781810151838201526020016101a9565b50505050905090810190601f1680156101ee5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561020f57600080fd5b5061021861069d565b60408051918252519081900360200190f35b34801561023657600080fd5b506102186106a3565b34801561024b57600080fd5b506102696004803603602081101561026257600080fd5b50356106a9565b604080519485526020850193909352838301919091526001600160a01b03166060830152519081900360800190f35b6102c1600480360360608110156102ae57600080fd5b50803590602081013590604001356106db565b005b3480156102cf57600080fd5b506102c1600480360360208110156102e657600080fd5b5035610840565b3480156102f957600080fd5b506102c16004803603608081101561031057600080fd5b81019060208101813564010000000081111561032b57600080fd5b82018360208201111561033d57600080fd5b8035906020019184600183028401116401000000008311171561035f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156103b257600080fd5b8201836020820111156103c457600080fd5b803590602001918460018302840111640100000000831117156103e657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561043957600080fd5b82018360208201111561044b57600080fd5b8035906020019184600183028401116401000000008311171561046d57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955050913592506108cb915050565b60016020818152600092835260409283902080548451600294821615610100026000190190911693909304601f81018390048302840183019094528383529283918301828280156105425780601f1061051757610100808354040283529160200191610542565b820191906000526020600020905b81548152906001019060200180831161052557829003601f168201915b505050505090806001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b50505060028085018054604080516020601f60001961010060018716150201909416959095049283018590048502810185019091528181529596959450909250908301828280156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b5050505060038301546004840154600590940154929360ff909116929091506001600160a01b031686565b60005481565b60025481565b60036020819052600091825260409091208054600182015460028301549290930154909291906001600160a01b031684565b60008381526001602081905260409091206003810154909160ff9091161515146107365760405162461bcd60e51b8152600401808060200182810382526021815260200180610cfd6021913960400191505060405180910390fd5b825b828110156107ba5781600601818154811061074f57fe5b90600052602060002090602091828204019190069054906101000a900460ff1615156001151514156107b25760405162461bcd60e51b815260040180806020018281038252602e815260200180610d1e602e913960400191505060405180910390fd5b600101610738565b508282038160040154023414610817576040805162461bcd60e51b815260206004820152601760248201527f53656e7420696e73756666696369656e742066756e6473000000000000000000604482015290519081900360640190fd5b600581015461082f906001600160a01b031634610a2a565b61083a848484610a62565b50505050565b6000818152600160205260409020600501546001600160a01b031633146108ae576040805162461bcd60e51b815260206004820152601760248201527f54484953204953204e4f5420594f55522053414d504c45000000000000000000604482015290519081900360640190fd5b50600080548152600160205260409020600301805460ff19169055565b6108d3610b67565b6040805160e081018252868152602080820187905281830186905260016060830152608082018590523360a0830152825161016d808252612dc08201909452919260c0840192918201612da0803683375050509052600080548152600160209081526040909120825180519394508493919261095492849290910190610baf565b50602082810151805161096d9260018501920190610baf565b5060408201518051610989916002840191602090910190610baf565b50606082015160038201805460ff19169115159190911790556080820151600482015560a08201516005820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516109ed916006840191602090910190610c2d565b5050600080546001810182556040519092507fa171907155458353ed530546f17c83494bba30b6a021aeffbf57e01b0b3acc029190a25050505050565b60405182906001600160a01b0382169083156108fc029084906000818181858888f1935050505015801561083a573d6000803e3d6000fd5b6040805160808101825284815260208082018581528284018581523360608501908152600280546000908152600380875288822097518855945160018089019190915593519187019190915590519490920180546001600160a01b0319166001600160a01b039095169490941790935586815291905220825b82811015610b2a576001826006018281548110610af457fe5b90600052602060002090602091828204019190066101000a81548160ff0219169083151502179055508080600101915050610adb565b50600280546001810190915560405185907f4f65de66b4cd3e97fb943ca503efa62b328170ad1a0aac0e9c979a164a317b3890600090a350505050565b6040518060e001604052806060815260200160608152602001606081526020016000151581526020016000815260200160006001600160a01b03168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bf057805160ff1916838001178555610c1d565b82800160010185558215610c1d579182015b82811115610c1d578251825591602001919060010190610c02565b50610c29929150610cce565b5090565b82805482825590600052602060002090601f01602090048101928215610cc25791602002820160005b83821115610c9357835183826101000a81548160ff0219169083151502179055509260200192600101602081600001049283019260010302610c56565b8015610cc05782816101000a81549060ff0219169055600101602081600001049283019260010302610c93565b505b50610c29929150610ce3565b5b80821115610c295760008155600101610ccf565b5b80821115610c2957805460ff19168155600101610ce456fe73616d706c6520776974682074686973204944206973206e6f742061637469766573616d706c65206973206e6f7420617661696c61626c6520666f72207468652073656c6563746564206461746573a2646970667358221220e5133179d95e2cb9765482fb0fd3e4d5eeb9c943c0ef29d883e2be25abb268cd64736f6c63430007000033";

export class SampleBread__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SampleBread> {
    return super.deploy(overrides || {}) as Promise<SampleBread>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SampleBread {
    return super.attach(address) as SampleBread;
  }
  connect(signer: Signer): SampleBread__factory {
    return super.connect(signer) as SampleBread__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleBreadInterface {
    return new utils.Interface(_abi) as SampleBreadInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleBread {
    return new Contract(address, _abi, signerOrProvider) as SampleBread;
  }
}
